---
- name: Run qm config to get VM configuration
  command: qm config "{{ vm_id }}"
  register: vm_config_output
  changed_when: false

- name: Extract SCSI lines
  set_fact:
    scsi_lines: "{{ vm_config_output.stdout_lines | select('match', '^scsi[0-9]+:') | list }}"

- name: Extract SCSI numbers
  set_fact:
    scsi_numbers: "{{ scsi_lines | map('regex_replace', '^scsi([0-9]+):.*', '\\1') | map('int') | list }}"

- name: Find the largest SCSI number
  set_fact:
    largest_scsi: "{{ scsi_numbers | max if scsi_numbers | length > 0 else 0 }}"

- name: Add 1 to the largest SCSI number
  set_fact:
    next_scsi: "{{ (largest_scsi | int) + 1 }}"

- name: Display the next SCSI number
  debug:
    msg: "The next SCSI number is {{ next_scsi }}"

- name: Extract attached devices from VM config
  set_fact:
    attached_devices: "{{ vm_config_output.stdout | regex_findall('scsi[0-9]+: /dev/disk/by-id/([^,\\s]+)') }}"

- name: Extract proxmox installation devices
  shell: zpool status
  register: proxmox_installation_storage

- name: Get list of all devices in /dev/disk/by-id
  command: ls -l /dev/disk/by-id/
  register: disk_by_id_output
  changed_when: false

- name: Parse device details
  set_fact:
    storage_devices: >-
      {{ 
        disk_by_id_output.stdout_lines
        | reject('search', 'total')
        | reject('search', 'part')
        | map('regex_replace', ' +', ' ')
        | map('split', ' ')
        | list
      }}
  
- name: Filter proxmox installation disk
  set_fact: 
    storage_devices_filtered: "{{ storage_devices | rejectattr('8', 'in', proxmox_installation_storage.stdout_lines | join(' ')) }}"

- name: Filter already attache disks
  set_fact: 
    storage_devices_filtered: "{{ storage_devices_filtered | rejectattr('8', 'in', attached_devices | join(' ')) }}"

- name: Filter disk id that starts with 'wwn-'
  set_fact: 
    storage_devices_filtered: "{{ storage_devices_filtered | rejectattr('8', 'search', '^wwn-') }}"

- name: Filter disk id that starts with 'nvme-eui'
  set_fact: 
    storage_devices_filtered: "{{ storage_devices_filtered | rejectattr('8', 'search', '^nvme-eui') }}"

- name: parse storage device unique ID
  set_fact:
    storage_devices_unique_id: "{{ storage_devices_filtered | map(attribute='8') | list }}"

- name: parse storage device name
  set_fact:
    storage_devices_name: "{{ storage_devices_filtered | map(attribute='10') | list | map('regex_replace', '^../../', '') | list }}"


- name: Get drive sizes
  shell: |
    lsblk -b -o NAME,SIZE --noheadings | awk '$1 == "{{ item }}" { printf "%s : %0.2fGB\n", $1, $2/1024/1024/1024 }'
  register: drive_sizes
  with_items: "{{ storage_devices_name }}"
  changed_when: false

- name: Extract drive sizes into a list
  set_fact:
    unattached_devices_with_sizes: "{{ unattached_devices_with_sizes | default([]) + [ item.stdout ] }}"
  with_items: "{{ drive_sizes.results }}"
  when: item.stdout != ""

- name: Dedup entries
  set_fact:
    combine: "{{ unattached_devices_with_sizes | zip(storage_devices_unique_id) | sort(attribute=1, reverse=False) | unique(attribute=0) | list }}"
    
- name: Get Unique ID and name from dedup combined
  set_fact:
    unattached_devices_with_sizes: "{{ combine | map('first') | list }}"
    storage_devices_unique_id: "{{ combine | map('last') | list }}"

- name: Debug storage_devices_unique_id
  debug:
    msg: "{{ storage_devices_unique_id }}"

- name: Show unattached_devices_with_sizes
  debug:
    msg: "{{ unattached_devices_with_sizes }}"


# # - name: Show list of unattached devices for user to select
# #   debug:
# #     msg: |
# #       Available storage devices:
# #       {% for device in storage_devices_name %}
# #        {{ loop.index }}: {{ storage_devices_name[loop.index-1] }} -> {{ storage_devices_unique_id[loop.index-1] }}
# #       {% endfor %}


- name: Show list of unattached devices for user to select
  debug:
    msg: "{{ ((my_idx+1) | string) + ': ' + unattached_devices_with_sizes[my_idx] + ' -> ' + storage_devices_unique_id[my_idx] }}"
  loop: "{{ storage_devices_unique_id }}"
  loop_control:
    index_var: my_idx

- name: Ask for user input
  pause:
    prompt: "Please select an storage from the list from 1 to {{ storage_devices_unique_id | length }}"
    echo: yes
  register: storage_devices_unique_id_index

- name: Display user input
  debug:
    msg: "User selected: {{ storage_devices_unique_id_index.user_input }}"



- name: Validate user selection
  fail:
    msg: "Invalid selection. Please enter a number between 1 and {{ storage_devices_unique_id | length }}."
  when: (storage_devices_unique_id_index.user_input | int) < 1 or (storage_devices_unique_id_index.user_input | int) > (storage_devices_unique_id | length)

- name: Get selected device
  set_fact:
    selected_device: "{{ storage_devices_unique_id[storage_devices_unique_id_index.user_input | int - 1] }}"

- name: Debug selected_device
  debug:
    msg: "{{ selected_device }}"

- name: Pass through selected device to the VM
  command: >
    qm set {{ vm_id }} 
    -scsi{{ next_scsi }} /dev/disk/by-id/{{ selected_device }}
  register: passthrough_output

- name: Confirm passthrough
  debug:
    msg: "Successfully passed through {{ selected_device }} to VM {{ vm_id }}."
  when: passthrough_output is succeeded
